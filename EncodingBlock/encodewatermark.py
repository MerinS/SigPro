from scipy.io.wavfile import read,write
import exceptions
import sys
import numpy
from sklearn.svm import SVC
from scipy.fftpack import fft,ifft
from scipy.fftpack.realtransforms import dct
from math import pow,exp
import matplotlib.pyplot as plt
# from constants import TH
N_SUBBAND         = 32
samplespersubband = 8

Win                  = 512
HalfWin              = 256

eps                  = 0.00000001
bark_array           = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]
critical_freq        = [50,150,250,350,450,570,700,840,1000,1170,1370,1600,1850,2150,2500,2900,3400,4000,4800,5800,7000,8500,10500,13500]
frequency_array      = [0.0 , 43.06640625 , 86.1328125 , 129.19921875 , 172.265625 , 215.33203125 , 258.3984375 , 301.46484375 , 344.53125 , 387.59765625 , 430.6640625 , 473.73046875 , 516.796875 , 559.86328125 , 602.9296875 , 645.99609375 , 689.0625 , 732.12890625 , 775.1953125 , 818.26171875 , 861.328125 , 904.39453125 , 947.4609375 , 990.52734375 , 1033.59375 , 1076.66015625 , 1119.7265625 , 1162.79296875 , 1205.859375 , 1248.92578125 , 1291.9921875 , 1335.05859375 , 1378.125 , 1421.19140625 , 1464.2578125 , 1507.32421875 , 1550.390625 , 1593.45703125 , 1636.5234375 , 1679.58984375 , 1722.65625 , 1765.72265625 , 1808.7890625 , 1851.85546875 , 1894.921875 , 1937.98828125 , 1981.0546875 , 2024.12109375 , 2067.1875 , 2110.25390625 , 2153.3203125 , 2196.38671875 , 2239.453125 , 2282.51953125 , 2325.5859375 , 2368.65234375 , 2411.71875 , 2454.78515625 , 2497.8515625 , 2540.91796875 , 2583.984375 , 2627.05078125 , 2670.1171875 , 2713.18359375 , 2756.25 , 2799.31640625 , 2842.3828125 , 2885.44921875 , 2928.515625 , 2971.58203125 , 3014.6484375 , 3057.71484375 , 3100.78125 , 3143.84765625 , 3186.9140625 , 3229.98046875 , 3273.046875 , 3316.11328125 , 3359.1796875 , 3402.24609375 , 3445.3125 , 3488.37890625 , 3531.4453125 , 3574.51171875 , 3617.578125 , 3660.64453125 , 3703.7109375 , 3746.77734375 , 3789.84375 , 3832.91015625 , 3875.9765625 , 3919.04296875 , 3962.109375 , 4005.17578125 , 4048.2421875 , 4091.30859375 , 4134.375 , 4177.44140625 , 4220.5078125 , 4263.57421875 , 4306.640625 , 4349.70703125 , 4392.7734375 , 4435.83984375 , 4478.90625 , 4521.97265625 , 4565.0390625 , 4608.10546875 , 4651.171875 , 4694.23828125 , 4737.3046875 , 4780.37109375 , 4823.4375 , 4866.50390625 , 4909.5703125 , 4952.63671875 , 4995.703125 , 5038.76953125 , 5081.8359375 , 5124.90234375 , 5167.96875 , 5211.03515625 , 5254.1015625 , 5297.16796875 , 5340.234375 , 5383.30078125 , 5426.3671875 , 5469.43359375 , 5512.5 , 5555.56640625 , 5598.6328125 , 5641.69921875 , 5684.765625 , 5727.83203125 , 5770.8984375 , 5813.96484375 , 5857.03125 , 5900.09765625 , 5943.1640625 , 5986.23046875 , 6029.296875 , 6072.36328125 , 6115.4296875 , 6158.49609375 , 6201.5625 , 6244.62890625 , 6287.6953125 , 6330.76171875 , 6373.828125 , 6416.89453125 , 6459.9609375 , 6503.02734375 , 6546.09375 , 6589.16015625 , 6632.2265625 , 6675.29296875 , 6718.359375 , 6761.42578125 , 6804.4921875 , 6847.55859375 , 6890.625 , 6933.69140625 , 6976.7578125 , 7019.82421875 , 7062.890625 , 7105.95703125 , 7149.0234375 , 7192.08984375 , 7235.15625 , 7278.22265625 , 7321.2890625 , 7364.35546875 , 7407.421875 , 7450.48828125 , 7493.5546875 , 7536.62109375 , 7579.6875 , 7622.75390625 , 7665.8203125 , 7708.88671875 , 7751.953125 , 7795.01953125 , 7838.0859375 , 7881.15234375 , 7924.21875 , 7967.28515625 , 8010.3515625 , 8053.41796875 , 8096.484375 , 8139.55078125 , 8182.6171875 , 8225.68359375 , 8268.75 , 8311.81640625 , 8354.8828125 , 8397.94921875 , 8441.015625 , 8484.08203125 , 8527.1484375 , 8570.21484375 , 8613.28125 , 8656.34765625 , 8699.4140625 , 8742.48046875 , 8785.546875 , 8828.61328125 , 8871.6796875 , 8914.74609375 , 8957.8125 , 9000.87890625 , 9043.9453125 , 9087.01171875 , 9130.078125 , 9173.14453125 , 9216.2109375 , 9259.27734375 , 9302.34375 , 9345.41015625 , 9388.4765625 , 9431.54296875 , 9474.609375 , 9517.67578125 , 9560.7421875 , 9603.80859375 , 9646.875 , 9689.94140625 , 9733.0078125 , 9776.07421875 , 9819.140625 , 9862.20703125 , 9905.2734375 , 9948.33984375 , 9991.40625 , 10034.4726562 , 10077.5390625 , 10120.6054688 , 10163.671875 , 10206.7382812 , 10249.8046875 , 10292.8710938 , 10335.9375 , 10379.0039062 , 10422.0703125 , 10465.1367188 , 10508.203125 , 10551.2695312 , 10594.3359375 , 10637.4023438 , 10680.46875 , 10723.5351562 , 10766.6015625 , 10809.6679688 , 10852.734375 , 10895.8007812 , 10938.8671875 , 10981.9335938 , 11025.0 , 11068.0664062 , 11111.1328125 , 11154.1992188 , 11197.265625 , 11240.3320312 , 11283.3984375 , 11326.4648438 , 11369.53125 , 11412.5976562 , 11455.6640625 , 11498.7304688 , 11541.796875 , 11584.8632812 , 11627.9296875 , 11670.9960938 , 11714.0625 , 11757.1289062 , 11800.1953125 , 11843.2617188 , 11886.328125 , 11929.3945312 , 11972.4609375 , 12015.5273438 , 12058.59375 , 12101.6601562 , 12144.7265625 , 12187.7929688 , 12230.859375 , 12273.9257812 , 12316.9921875 , 12360.0585938 , 12403.125 , 12446.1914062 , 12489.2578125 , 12532.3242188 , 12575.390625 , 12618.4570312 , 12661.5234375 , 12704.5898438 , 12747.65625 , 12790.7226562 , 12833.7890625 , 12876.8554688 , 12919.921875 , 12962.9882812 , 13006.0546875 , 13049.1210938 , 13092.1875 , 13135.2539062 , 13178.3203125 , 13221.3867188 , 13264.453125 , 13307.5195312 , 13350.5859375 , 13393.6523438 , 13436.71875 , 13479.7851562 , 13522.8515625 , 13565.9179688 , 13608.984375 , 13652.0507812 , 13695.1171875 , 13738.1835938 , 13781.25 , 13824.3164062 , 13867.3828125 , 13910.4492188 , 13953.515625 , 13996.5820312 , 14039.6484375 , 14082.7148438 , 14125.78125 , 14168.8476562 , 14211.9140625 , 14254.9804688 , 14298.046875 , 14341.1132812 , 14384.1796875 , 14427.2460938 , 14470.3125 , 14513.3789062 , 14556.4453125 , 14599.5117188 , 14642.578125 , 14685.6445312 , 14728.7109375 , 14771.7773438 , 14814.84375 , 14857.9101562 , 14900.9765625 , 14944.0429688 , 14987.109375 , 15030.1757812 , 15073.2421875 , 15116.3085938 , 15159.375 , 15202.4414062 , 15245.5078125 , 15288.5742188 , 15331.640625 , 15374.7070312 , 15417.7734375 , 15460.8398438 , 15503.90625 , 15546.9726562 , 15590.0390625 , 15633.1054688 , 15676.171875 , 15719.2382812 , 15762.3046875 , 15805.3710938 , 15848.4375 , 15891.5039062 , 15934.5703125 , 15977.6367188 , 16020.703125 , 16063.7695312 , 16106.8359375 , 16149.9023438 , 16192.96875 , 16236.0351562 , 16279.1015625 , 16322.1679688 , 16365.234375 , 16408.3007812 , 16451.3671875 , 16494.4335938 , 16537.5 , 16580.5664062 , 16623.6328125 , 16666.6992188 , 16709.765625 , 16752.8320312 , 16795.8984375 , 16838.9648438 , 16882.03125 , 16925.0976562 , 16968.1640625 , 17011.2304688 , 17054.296875 , 17097.3632812 , 17140.4296875 , 17183.4960938 , 17226.5625 , 17269.6289062 , 17312.6953125 , 17355.7617188 , 17398.828125 , 17441.8945312 , 17484.9609375 , 17528.0273438 , 17571.09375 , 17614.1601562 , 17657.2265625 , 17700.2929688 , 17743.359375 , 17786.4257812 , 17829.4921875 , 17872.5585938 , 17915.625 , 17958.6914062 , 18001.7578125 , 18044.8242188 , 18087.890625 , 18130.9570312 , 18174.0234375 , 18217.0898438 , 18260.15625 , 18303.2226562 , 18346.2890625 , 18389.3554688 , 18432.421875 , 18475.4882812 , 18518.5546875 , 18561.6210938 , 18604.6875 , 18647.7539062 , 18690.8203125 , 18733.8867188 , 18776.953125 , 18820.0195312 , 18863.0859375 , 18906.1523438 , 18949.21875 , 18992.2851562 , 19035.3515625 , 19078.4179688 , 19121.484375 , 19164.5507812 , 19207.6171875 , 19250.6835938 , 19293.75 , 19336.8164062 , 19379.8828125 , 19422.9492188 , 19466.015625 , 19509.0820312 , 19552.1484375 , 19595.2148438 , 19638.28125 , 19681.3476562 , 19724.4140625 , 19767.4804688 , 19810.546875 , 19853.6132812 , 19896.6796875 , 19939.7460938 , 19982.8125 , 20025.8789062 , 20068.9453125 , 20112.0117188 , 20155.078125 , 20198.1445312 , 20241.2109375 , 20284.2773438 , 20327.34375 , 20370.4101562 , 20413.4765625 , 20456.5429688 , 20499.609375 , 20542.6757812 , 20585.7421875 , 20628.8085938 , 20671.875 , 20714.9414062 , 20758.0078125 , 20801.0742188 , 20844.140625 , 20887.2070312 , 20930.2734375 , 20973.3398438 , 21016.40625 , 21059.4726562 , 21102.5390625 , 21145.6054688 , 21188.671875 , 21231.7382812 , 21274.8046875 , 21317.8710938 , 21360.9375 , 21404.0039062 , 21447.0703125 , 21490.1367188 , 21533.203125 , 21576.2695312 , 21619.3359375 , 21662.4023438 , 21705.46875 , 21748.5351562 , 21791.6015625 , 21834.6679688 , 21877.734375 , 21920.8007812 , 21963.8671875 , 22006.9335938]
bark_array_float     = [0.0, 0.85024138263826743, 1.6942053376831454, 2.5250507034992236, 3.3366115985833695, 4.1236353554724543, 4.8819244376466751, 5.608381492206866, 6.3009708527794768, 6.9586182220227455, 7.5810726534355322, 8.1687527011726822, 8.722593747945556, 9.2439079106215232, 9.734262823448546, 10.195381630314646, 10.629063811518868, 11.037124874320256, 11.421352182763128, 11.783474017052161, 12.125139107984586, 12.447904220682455, 12.753227753802294, 13.042467709685686, 13.316882742999283, 13.577635295920418, 13.825796074404989, 14.062349316406126, 14.288198455775447, 14.504171902397042, 14.711028746947491, 14.909464263758057, 15.100115132777239, 15.283564335802062, 15.46034570629039, 15.630948128765709, 15.795819395055926, 15.955369731863527, 16.10997501856599, 16.259979716524793, 16.405699532151548, 16.547423835988837, 16.685417859435859, 16.819924689717944, 16.951167082429798, 17.079349109590627, 17.204657659714915, 17.327263804978823, 17.447324049184004, 17.564981468909391, 17.680366759009619, 17.79359919247182, 17.904787503582391, 18.014030702380612, 18.121418827483769, 18.227033643554506, 18.330949288942222, 18.433232878359775, 18.53394506485289, 18.633140564775392, 18.730868648996868, 18.827173603135677, 18.922095159225808, 19.015668900888357, 19.107926643783284, 19.198896792862168, 19.288604677724667, 19.377072867197523, 19.464321464102326, 19.5503683810539, 19.635229598032712, 19.718919402398591, 19.801450611957243, 19.882834781652491, 19.963082394433126, 20.042203036831392, 20.12020555978809, 20.197098225264277, 20.272888839190419, 20.347584871317451, 20.421193562550346, 20.493722020360341, 20.565177302887214, 20.63556649235586, 20.704896758441453, 20.773175412224351, 20.840409951378476, 20.906608097236042, 20.97177782436577, 21.035927383292648, 21.09906531697386, 21.161200471628522, 21.222342002498927, 21.282499375097771, 21.341682362470536, 21.399901038974654, 21.457165771048214, 21.513487205410868, 21.568876255108933, 21.623344083785632, 21.676902088526578, 21.729561881600059, 21.781335271381931, 21.832234242726038, 21.882270937013267, 21.931457632086047, 21.979806722249897, 22.027330698500254, 22.074042129110744, 22.119953640698775, 22.16507789986553, 22.20942759549024, 22.253015421743065, 22.29585406186677, 22.337956172764585, 22.379334370420594, 22.420001216168703, 22.45996920381765, 22.49925074763183, 22.537858171160973, 22.575803696906277, 22.613099436805623, 22.649757383516707, 22.685789402473617, 22.721207224689696, 22.756022440277718, 22.790246492656763, 22.823890673414102, 22.856966117789909, 22.889483800752181, 22.921454533629223, 22.95288896126744, 22.983797559682451, 23.014190634172319, 23.044078317862446, 23.073470570652468, 23.102377178536678, 23.130807753270389, 23.158771732355881, 23.186278379322722, 23.213336784278315, 23.239955864705934, 23.266144366488422, 23.291910865137183, 23.317263767206946, 23.342211311878231, 23.366761572690297, 23.39092245940855, 23.414701720011326, 23.438106942782145, 23.461145558494209, 23.483824842675048, 23.506151917940013, 23.528133756384115, 23.549777182022499, 23.571088873270675, 23.592075365456157, 23.612743053354031, 23.633098193739329, 23.653146907950052, 23.672895184454813, 23.692348881419843, 23.711513729270632, 23.730395333243653, 23.748999175924329, 23.767330619767627, 23.785394909598075, 23.803197175086328, 23.820742433199733, 23.838035590624639, 23.855081446158408, 23.871884693069461, 23.888449921423749, 23.904781620376411, 23.920884180427443, 23.936761895640505, 23.952418965824087, 23.967859498674322, 23.983087511879095, 23.998106935183014, 24.012921612412992, 24.027535303464333, 24.041951686247252, 24.056174358593903, 24.070206840125959, 24.084052574083014, 24.097714929112026, 24.111197201018022, 24.124502614476594, 24.137634324708394, 24.150595419116193, 24.163388918884927, 24.176017780545227, 24.18848489750097, 24.200793101521406, 24.212945164198405, 24.224943798369448, 24.236791659506906, 24.248491347074257, 24.260045405849855, 24.271456327218822, 24.282726550433772, 24.293858463844906, 24.304854406100173, 24.315716667316103, 24.326447490219937, 24.337049071263653, 24.347523561710556, 24.357873068695028, 24.368099656256021, 24.378205346344899, 24.388192119808288, 24.398061917346418, 24.407816640447617, 24.417458152299496, 24.426988278677385, 24.436408808810555, 24.445721496226835, 24.454928059576055, 24.464030183432925, 24.473029519079816, 24.481927685269984, 24.490726268971628, 24.499426826093455, 24.508030882191996, 24.516539933161308, 24.524955445905434, 24.533278858994091, 24.541511583301954, 24.5496550026321, 24.557710474323823, 24.565679329845416, 24.573562875372183, 24.581362392350108, 24.589079138045559, 24.596714346081374, 24.604269226959708, 24.611744968571962, 24.619142736696134, 24.626463675481919, 24.633708907923946, 24.640879536323304, 24.647976642737863, 24.655001289421499, 24.661954519252671, 24.668837356152487, 24.675650805492655, 24.682395854493514, 24.689073472612407, 24.695684611922665, 24.702230207483492, 24.708711177700867, 24.715128424679836, 24.721482834568313, 24.727775277892697, 24.734006609885427, 24.740177670804755]
bark_array_int       = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24]
threshold_quiet_vals = [0.00944567963877, 25.866905584234836, 14.845877790185327, 10.721316524988449, 8.502852236361942, 7.095039734397721, 6.110057817059093, 5.373618583691817, 4.7948098634808005, 4.320951394787291, 3.91894532646452, 3.5665698929651404, 3.2480334029873283, 2.9515476826576665, 2.6679398661655123, 2.3898359667120745, 2.111178657422631, 1.8269507493008739, 1.5330305890978444, 1.2261341466333364, 0.9038138277834085, 0.5644923360120119, 0.2075144738888888, -0.1667975824961104, -0.5570982493416764, -0.9609929584662045, -1.3750426339378354, -1.794805851953005, -2.2149239105396985, -2.629251204875492, -3.031030143399911, -3.4131065183602547, -3.7681779828149615, -4.089065333939351, -4.368993911448186, -4.601870816330641, -4.782543013475016, -4.90702180313606, -4.972660643003923, -4.978275792766078, -4.9242025639086755, -4.812283839916469, -4.645791682760887, -4.4292869319167885, -4.168425409498801, -3.8697223837834955, -3.540289091365426, -3.187556236719281, -2.818999431951775, -2.4418805581106096, -2.0630171565656132, -1.6885893961821015, -1.3239911550681212, -0.973728568644711, -0.641366285092746, -0.3295188608072511, -0.03988240010067545, 0.22670018646337686, 0.47014800682254054, 0.6910332246336232, 0.8904622751361903, 1.0699545692887857, 1.2313249688762915, 1.3765750516416309, 1.5077968159565356, 1.627091116063716, 1.7365018667426917, 1.8379659795469205, 1.9332781335420957, 2.0240688582804713, 2.1117940103796955, 2.1977335356205696, 2.2829973927971183, 2.3685366346118784, 2.4551578544491197, 2.5435394780773533, 2.634248673462246, 2.7277579436563464, 2.824460737940284, 2.924685652554163, 3.0287089879767137, 3.1367655831322034, 3.2490579600924065, 3.365763890161053, 3.487042539389939, 3.6130393747622103, 3.7438900175023617, 3.879723222648571, 4.020663148725649, 4.166831061730887, 4.318346596425363, 4.475328677026105, 4.637896180049153, 4.806168404944998, 4.980265403577698, 5.160308207528755, 5.346418982480119, 5.538721131274028, 5.737339361346369, 5.942399727770581, 6.154029659839783, 6.372357976700712, 6.597514895821029, 6.829632036847779, 7.068842422563367, 7.315280478061703, 7.569082028872243, 7.830384298496855, 8.099325905651252, 8.37604686139065, 8.660688566227691, 8.953393807305265, 9.254306755659014, 9.563572963587063, 9.881339362134174, 10.207754258691846, 10.542967334712019, 10.887129643530722, 11.240393608296788, 11.602913020000425, 11.97484303559668, 12.356340176218463, 12.747562325474533, 13.148668727827685, 13.559819987048746, 13.981178064742458, 14.412906278941138, 14.85516930276268, 15.308133163129432, 15.771965239544603, 16.246834262923464, 16.732910314476186, 17.23036482463989, 17.739370572057318, 18.260101682599643, 18.79273362843144, 19.3374432271154, 19.894408640755103, 20.46380937517382, 21.045826279127525, 21.640641543550657, 22.248438700832832, 22.869402624125136, 23.503719526674676, 24.15157696118574, 24.8131638192068, 25.488670330541623, 26.1782880626838, 26.882209920273443, 27.600630144574897, 28.333744312974904, 29.08174933849979, 29.844843469351275, 30.623226288459886, 31.417098713055022, 32.22666299425138, 33.05212271665051, 33.89368279795727, 34.751549488610394, 35.625930371426286, 36.51703436125615, 37.42507170465503, 38.35025397956305, 39.29279409499787, 40.25290629075797, 41.23080613713653, 42.22671053464509, 43.24083771374705, 44.273407234600235, 45.324639986808265, 46.394758189180614, 47.48398538950053, 48.59254646430101, 49.72066761864824, 50.86857638593213, 52.036501627664016, 53.224673533280814, 54.43332361995571, 55.66268473241508, 56.912991042761185, 58.18447805030071, 59.47738258137875, 60.79194278921803, 62.12839815376348, 63.48698948153127, 64.86795890546308, 66.27154988478446, 67.69800720486795, 69.14757697710012, 70.62050663875308, 72.11704495285944, 73.6374420080914, 75.1819492186434, 76.75081932411827, 78.344306389417, 79.96266580463129, 81.60615428493978, 83.2750298705072, 84.96955192638622, 86.68998114242277, 88.43657953316321, 90.20961043776504, 92.00933851990962, 93.83602976771763, 95.68995149366715, 97.57137233451324, 99.48056225121081, 101.41779252883896, 103.38333577652763, 105.37746592738665, 107.40045823843589, 109.45258929053816, 111.53413698833357, 113.64538056017574, 115.78660055806989, 117.95807885761211, 120.16009865793096, 122.39294448163001, 124.6569021747323, 126.95225890662633, 129.27930317001292, 131.63832478085408, 134.02961487832283, 136.45346592475462, 138.91017170559996, 141.40002732937782, 143.9233292276307, 146.48037515488093, 149.07146418858764, 151.69689672910536, 154.3569744996429, 157.05200054622406, 159.78227923764902, 162.54811626545626, 165.34981864388652, 168.18769470984626, 171.06205412287304, 173.97320786510144, 176.9214682412295, 179.90714887848694, 182.93056472660265, 185.99203205777425, 189.0918684666379, 192.23039287023852, 195.40792550800174, 198.62478794170505, 201.8813030554508, 205.17779505563934, 208.5145894709428, 211.89201315228007, 215.31039427279103, 218.77006232781278, 222.27134813485563, 225.81458383357983, 229.40010288577326, 233.02824007532854, 236.69933150822166]

#critical definitions, ie the index of the frequency array that has 
#the frequency closest to the corresponding critical band rate
#in bark
criticaldefn         = [1, 2, 3, 4, 5, 7, 8, 10, 12, 14, 16, 19, 21, 25, 29, 34, 39, 46, 56, 67, 81, 99, 122, 157]

# multiplier for the frames, B frames per unit, implies, 4 elements
C                    = [1,1,-1,-1]
U                    = 4    #no of frames per unit
B                    = 10    #no of units per block
filtbank_ind_scramble= [52 , 56 , 22 , 26 , 7 , 11 , 122 , 130 , 88 , 93 , 140 , 148 , 107 , 113 , 182 , 194 , 160 , 170 , 37 , 41 , 57 , 61 , 12 , 16 , 94 , 99 , 82 , 87 , 47 , 51 , 72 , 76 , 100 , 106 , 27 , 31 , 77 , 81 , 32 , 36 , 131 , 139 , 149 , 159 , 171 , 181 , 17 , 21 , 67 , 71 , 114 , 121 , 62 , 66 , 42 , 46]
filtbank_ind         = [7 , 11 , 12 , 16 , 17 , 21 , 22 , 26 , 27 , 31 , 32 , 36 , 37 , 41 , 42 , 46 , 47 , 51 , 52 , 56 , 57 , 61 , 62 , 66 , 67 , 71 , 72 , 76 , 77 , 81 , 82 , 87 , 88 , 93 , 94 , 99 , 100 , 106 , 107 , 113 , 114 , 121 , 122 , 130 , 131 , 139 , 140 , 148 , 149 , 159 , 160 , 170 , 171 , 181 , 182 , 194]
Num_subbands         = 28
watermark_strength   = 10

frame_size           = 512
duration_block_point = B*U*frame_size/(2.0)

# mp3coding relevant points
# frequency range, bark_mp3, ATH
frequency_mp3code    = [86.13 , 172.27 , 258.4 , 344.53 , 430.66 , 516.8 , 602.93 , 689.06 , 775.2 , 861.33 , 947.46 , 1033.59 , 1119.73 , 1205.86 , 1291.99 , 1378.13 , 1464.26 , 1550.39 , 1636.52 , 1722.66 , 1808.79 , 1894.92 , 1981.05 , 2067.19 , 2153.32 , 2239.45 , 2325.59 , 2411.72 , 2497.85 , 2583.98 , 2670.12 , 2756.25 , 2842.38 , 2928.52 , 3014.65 , 3100.78 , 3186.91 , 3273.05 , 3359.18 , 3445.31 , 3531.45 , 3617.58 , 3703.71 , 3789.84 , 3875.98 , 3962.11 , 4048.24 , 4134.38 , 4306.64 , 4478.91 , 4651.17 , 4823.44 , 4995.7 , 5167.97 , 5340.23 , 5512.5 , 5684.77 , 5857.03 , 6029.3 , 6201.56 , 6373.83 , 6546.09 , 6718.36 , 6890.63 , 7062.89 , 7235.16 , 7407.42 , 7579.69 , 7751.95 , 7924.22 , 8096.48 , 8268.75 , 8613.28 , 8957.81 , 9302.34 , 9646.88 , 9991.41 , 10335.94 , 10680.47 , 11025.0 , 11369.53 , 11714.06 , 12058.59 , 12403.13 , 12747.66 , 13092.19 , 13436.72 , 13781.25 , 14125.78 , 14470.31 , 14814.84 , 15159.38 , 15503.91 , 15848.44 , 16192.97 , 16537.5 , 16882.03 , 17226.56 , 17571.09 , 17915.63 , 18260.16 , 18604.69 , 18949.22 , 19293.75 , 19638.28 , 19982.81]
bark_mp3code         = [0.85 , 1.694 , 2.525 , 3.337 , 4.124 , 4.882 , 5.608 , 6.301 , 6.959 , 7.581 , 8.169 , 8.723 , 9.244 , 9.734 , 10.195 , 10.629 , 11.037 , 11.421 , 11.783 , 12.125 , 12.448 , 12.753 , 13.042 , 13.317 , 13.577 , 13.825 , 14.062 , 14.288 , 14.504 , 14.711 , 14.909 , 15.1 , 15.283 , 15.46 , 15.631 , 15.795 , 15.955 , 16.11 , 16.26 , 16.405 , 16.547 , 16.685 , 16.82 , 16.951 , 17.079 , 17.204 , 17.327 , 17.447 , 17.68 , 17.904 , 18.121 , 18.331 , 18.534 , 18.73 , 18.922 , 19.108 , 19.288 , 19.464 , 19.635 , 19.801 , 19.963 , 20.12 , 20.273 , 20.421 , 20.565 , 20.705 , 20.84 , 20.971 , 21.099 , 21.222 , 21.341 , 21.457 , 21.676 , 21.882 , 22.074 , 22.253 , 22.42 , 22.575 , 22.721 , 22.857 , 22.984 , 23.102 , 23.213 , 23.317 , 23.414 , 23.506 , 23.592 , 23.673 , 23.749 , 23.821 , 23.888 , 23.952 , 24.013 , 24.07 , 24.124 , 24.176 , 24.225 , 24.271 , 24.316 , 24.358 , 24.398 , 24.436 , 24.473 , 24.508 , 24.541 , 24.573]
thresh_quiet_mp3code = [25.87 , 14.85 , 10.72 , 8.5 , 7.1 , 6.11 , 5.37 , 4.79 , 4.32 , 3.92 , 3.57 , 3.25 , 2.95 , 2.67 , 2.39 , 2.11 , 1.83 , 1.53 , 1.23 , 0.9 , 0.56 , 0.21 , -0.17 , -0.56 , -0.96 , -1.38 , -1.79 , -2.21 , -2.63 , -3.03 , -3.41 , -3.77 , -4.09 , -4.37 , -4.6 , -4.78 , -4.91 , -4.97 , -4.98 , -4.92 , -4.81 , -4.65 , -4.43 , -4.17 , -3.87 , -3.54 , -3.19 , -2.82 , -2.06 , -1.32 , -0.64 , -0.04 , 0.47 , 0.89 , 1.23 , 1.51 , 1.74 , 1.93 , 2.11 , 2.28 , 2.46 , 2.63 , 2.82 , 3.03 , 3.25 , 3.49 , 3.74 , 4.02 , 4.32 , 4.64 , 4.98 , 5.35 , 6.15 , 7.07 , 8.1 , 9.25 , 10.54 , 11.97 , 13.56 , 15.31 , 17.23 , 19.34 , 21.64 , 24.15 , 26.88 , 29.84 , 33.05 , 36.52 , 40.25 , 44.27 , 48.59 , 53.22 , 58.18 , 63.49 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0 , 68.0]
relevant_axis_terms  = [2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 , 36 , 38 , 40 , 42 , 44 , 46 , 48 , 50 , 52 , 54 , 56 , 58 , 60 , 62 , 64 , 66 , 68 , 70 , 72 , 74 , 76 , 78 , 80 , 82 , 84 , 86 , 88 , 90 , 92 , 94 , 96 , 100 , 104 , 108 , 112 , 116 , 120 , 124 , 128 , 132 , 136 , 140 , 144 , 148 , 152 , 156 , 160 , 164 , 168 , 172 , 176 , 180 , 184 , 188 , 192 , 200 , 208 , 216 , 224 , 232 , 240 , 248 , 256 , 264 , 272 , 280 , 288 , 296 , 304 , 312 , 320 , 328 , 336 , 344 , 352 , 360 , 368 , 376 , 384 , 392 , 400 , 408 , 416 , 424 , 432 , 440 , 448 , 456]
subset_105_mp3code   = [0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 47 , 48 , 48 , 49 , 49 , 50 , 50 , 51 , 51 , 52 , 52 , 53 , 53 , 54 , 54 , 55 , 55 , 56 , 56 , 57 , 57 , 58 , 58 , 59 , 59 , 60 , 60 , 61 , 61 , 62 , 62 , 63 , 63 , 64 , 64 , 65 , 65 , 66 , 66 , 67 , 67 , 68 , 68 , 69 , 69 , 70 , 70 , 71 , 71 , 71 , 71 , 72 , 72 , 72 , 72 , 73 , 73 , 73 , 73 , 74 , 74 , 74 , 74 , 75 , 75 , 75 , 75 , 76 , 76 , 76 , 76 , 77 , 77 , 77 , 77 , 78 , 78 , 78 , 78 , 79 , 79 , 79 , 79 , 80 , 80 , 80 , 80 , 81 , 81 , 81 , 81 , 82 , 82 , 82 , 82 , 83 , 83 , 83 , 83 , 84 , 84 , 84 , 84 , 85 , 85 , 85 , 85 , 86 , 86 , 86 , 86 , 87 , 87 , 87 , 87 , 88 , 88 , 88 , 88 , 89 , 89 , 89 , 89 , 90 , 90 , 90 , 90 , 91 , 91 , 91 , 91 , 92 , 92 , 92 , 92 , 93 , 93 , 93 , 93 , 94 , 94 , 94 , 94 , 95 , 95 , 95 , 95 , 96 , 96 , 96 , 96 , 97 , 97 , 97 , 97 , 98 , 98 , 98 , 98 , 99 , 99 , 99 , 99 , 100 , 100 , 100 , 100 , 101 , 101 , 101 , 101 , 102 , 102 , 102 , 102 , 103 , 103 , 103 , 103 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104 , 104]
length_mp3code       = 106
#read the wave file
def dataread(filename):
    try:
        data = read(filename)
        return data
    except IOError:
        print("IOError:Wrong file or file path")
        #TODO we will trace back and add codes for the exit code
        sys.exit()

def datawrite(filename,rate,data):
    try:
        write(filename, rate, data)
    except IOError:
        print("IOError:Wrong file or file path")
        #TODO we will trace back and add codes for the exit code
        sys.exit()

# Block to expand the bits obtained from the bit-expand block
# TODO-REDO
def signexpanded(PNseq,N_unit,factor):
    tmp = []
    for i in range(Num_subbands):
        tmp.append(factor*PNseq[N_unit+(B*i)])

    sign = []
    for i in range(HalfWin):
        sign.append(1)

    for i in range(Num_subbands):
        for j in range(filtbank_ind_scramble[2*i],filtbank_ind_scramble[(2*i)+1]):
            sign[j]=tmp[i];
    return sign

# Unused as the values of Fs and Win are fixed, the freq array is known
# they have been hardcoded for efficient computation
def frequency_axis(Fs,Win):
    frequency_array = []
    for i in range((Win/2)+1):
        frequency_array.append((i*Fs)/float(Win))
    return frequency_array

# Unused as the values the frequency array and the formula for threshold 
# in quiet are fixed, the threshold in quiet is known
# they have been hardcoded for efficient computation
def threshold_quiet(array_frequency,length):
    quiet_threshold = []
    quiet_threshold.append(0.00944567963877)
    for i in range(1,length):
        quiet_threshold.append((3.64*pow((array_frequency[i]/1000.0),-0.8))-(6.5*exp(-0.6*pow(((array_frequency[i]/1000.0)-3.3),2)))+(0.001*pow((array_frequency[i]/1000.0),4)))
    return quiet_threshold

# Unused as the values the frequency array and the formula for bark scale
# are fixed, the bark scale array is known
# they have been hardcoded for efficient computation
def bark(f):    
    "Convert a frequency from Hertz to Bark"
    return 13.0 * numpy.arctan(0.76 * f / 1000.0) + 3.5 * numpy.arctan((f / 7500.0) ** 2)

# Unused as the values the frequency array and the center frequency of 
# each bark are fixed, the frequncy value closest to centre frequncy in each bark is known
# they have been hardcoded for efficient computation
def closeto_critical(f):
    num = 0
    critical_close = []
    for i in range(len(f)):
        if(f[i]>critical_freq[num]):
            if(i-1>=0):
                if(numpy.mean([int(f[i]),int(f[i-1])])>critical_freq[num]):
                    x = (i-1)
                else:
                    x = (i)
            else:
                x = i
            critical_close.append(x)
            num+=1
            if(num==len(critical_freq)):
                break
    return critical_close


def hann(wave,length):
    wave_hann = numpy.empty(length)
    for i in range(length):
        wave_hann[i]=0.81649658092*(1-numpy.cos(2*numpy.pi*i/length))*wave[i]
    return wave_hann

def SPL_normalise(wave_DB,length):
    maximum_value = max(wave_DB)
    wave_DB_norm = numpy.empty(length)
    for i in range(length):
        wave_DB_norm[i]=96-maximum_value+wave_DB[i]
        # wave_DB[i] = wave_DB[i]
    return wave_DB_norm,96-maximum_value


def tonal_markers_sound(wave_DB,length):
    # print wave_DB
    # if (length>252):
    #     length = 252
    val  = numpy.zeros(length)
    Pval = numpy.zeros(length)

    # Figures if a point is a tonal maxima, allots a value of 1 to tonal and 0 to non tonal and 3 to irrelevant ones
    for i in range(3,62):
        if(val[i]!=3):
            c = 0
            if(wave_DB[i]-wave_DB[i+2]<7 or wave_DB[i]-wave_DB[i-2]<7):
                c = 1
            if c==0 :
                val[i] = 1
                val[i+1] = 3
                val[i+2] = 3
            else :
                val[i] = 0

    for i in range(63,127):
        if(val[i] !=3):    
            c = 0
            if(wave_DB[i]-wave_DB[i+2]<7 or wave_DB[i]-wave_DB[i-2]<7 or wave_DB[i]-wave_DB[i+3]<7 or wave_DB[i]-wave_DB[i-3]<7):
                c = 1
            if c==0 :
                val[i] = 1
                val[i+1] = 3
                val[i+2] = 3
                val[i+3] = 3
            else :
                val[i] = 0

    for i in range(127,250):
        if(val[i] !=3):
            c = 0
            for j in range(2,7):
                if(wave_DB[i]-wave_DB[i+j]<7 or wave_DB[i]-wave_DB[i-j]<7):
                    c = 1
            if c==0 :
                val[i] = 1
                val[i+1] = 3
                val[i+2] = 3
                val[i+3] = 3
                val[i+4] = 3
                val[i+5] = 3
                val[i+6] = 3
            else :
                val[i] = 0

    # # If at all there is a need to see the tonal peak indexes
    # Tonal_list = []
    # for i in range(251):
    # 	if(val[i]==1):
    # 		Tonal_list.append(i)

    # combine the dB power values on the left and right of the tonal masker
    for i in range(3,250):
        if(val[i]==1):
            Pval[i]   = 10*numpy.log10(pow(10,(wave_DB[i-1]/10.0))+pow(10,(wave_DB[i]/10.0))+pow(10,(wave_DB[i+1]/10.0)))

    # Selects only the non tonal masker that is closest to the central 
    # to every critical bandrate and adds up all the non tonals in that bin
    # into this one bin, and gives a marker of 2 to the central non tonal one
    sum1 = 0
    bark_prev = bark_array_int[0]
    for i in range(length):
        if(val[i]==0 or val[i]==3):
            if(bark_array_int[i]!=bark_prev):
                Pval[criticaldefn[bark_prev]]=10*numpy.log10(sum1)
                val[criticaldefn[bark_prev]]=2
                bark_prev = bark_array_int[i]
                sum1 = 0   
            Pval[i] = 0         
            sum1+=pow(10,(wave_DB[i]/10.0))

    # # If at all there is a need to see the non tonal peak indexes
    # Non_Tonal_list = []
    # for i in range(250):
    # 	if(val[i]==2):
    # 		Non_Tonal_list.append(i)

    # removes the invalid tonal and non tonal markers
    # removes the ones below threshold of hearing and 
    # removes the smaller among the ones within 0.5 barks to each other
    count = 0
    for i in range(length):
        if(val[i]==1 or val[i]==2):
            if(Pval[i]<threshold_quiet_vals[i]):
                val[i] = 0
                Pval[i]= 0
            if(count>0):
                if(bark_array_float[valprev]-bark_array_float[i]<0.5):
                    if(Pval[valprev]>Pval[i]):
                        Pval[i] = 0
                        val[i]  = 0
                    else:
                        Pval[valprev]=0
                        val[valprev]=0
            count = count+1
            valprev = i
    return Pval,val
            
def compute_masking_indices(val,length):
    masking_indices  = numpy.empty(length)
    for i in range(length):
        if(val[i]==1):
           masking_indices[i]=((-6.025)-(0.275*bark_array_float[i]))
        elif(val[i]==2):
           masking_indices[i]=((-2.025)-(0.175*bark_array_float[i]))
    return masking_indices

def spreading_function(zmaskee,zmasker,Pmasker):
    z = zmaskee-zmasker
    c = 0
    if ((-3 <= z) and (z<-1)):
        v = (17*z)-(0.4*Pmasker)+11
        c = 1
    elif ((-1<=z) and (z<0)):
        v = ((0.4*Pmasker)+6)*z
        c = 2
    elif ((0<=z) and (z<1)):
        v = (-17)*z
        c = 3
    elif ((1<=z) and (z<8)):
        v = ((-17)*z)+(0.15*Pmasker*(z-1))
        c = 4
    if c==0:
        return 'INVALID'
    if(c==1 or c==2 or c==3 or c==4):
        return v

def tonal_nontonal_threshold(Pval,val,float_barkarray_val,mask_index,length):
    sum_val = 0
    for i in range(length):
        if (val[i] ==2 or val[i] ==1):
            val_spreading_fn = spreading_function(float_barkarray_val,bark_array_float[i],Pval[i])
            if(val_spreading_fn!= 'INVALID'):
                l = Pval[i]+mask_index[i]+val_spreading_fn
                x = 10**(l/10.0)
                sum_val= sum_val+x
    return sum_val

def globalMaskingThreshold(Pval,val,mask_index,length):
    global_masker = numpy.empty(length_mp3code)
    for i in range(len(frequency_mp3code)):
        x = tonal_nontonal_threshold(Pval,val,bark_mp3code[i],mask_index,length)
        global_masker[i]=10*numpy.log10((10**(thresh_quiet_mp3code[i]/10))+x)
    return global_masker

def minMaskingThreshold(global_mask):
    min_masker = numpy.empty(N_SUBBAND)
    for i in range(N_SUBBAND):
        min_masker[i] = global_mask[subset_105_mp3code[samplespersubband*i]]
        for j in range(samplespersubband):
                k = subset_105_mp3code[(samplespersubband*i)+j]
                if (min_masker[i] > global_mask[k]):
                    min_masker[i] = global_mask[k]
    return min_masker

def minMaskFill(min_mask,parameter):
    fill_min_masker = numpy.ones(HalfWin)
    for i in range(N_SUBBAND):
        fill_min_masker[(samplespersubband*i):samplespersubband*(i+1)] = (pow(10,float((min_mask[i] - parameter)/20))*watermark_strength)
    	# fill_min_masker[(samplespersubband*i):samplespersubband*(i+1)] = pow(10,float((min_mask[i] - parameter)/20))
    	# fill_min_masker[(samplespersubband*i):samplespersubband*(i+1)] = min_mask[i]
    return fill_min_masker

def watermarking_block(signal,watermarkbits_expanded,Fs,Win,Step):
    Win = int(Win)
    Step = int(Step)

    # frequency_array - array of the frequencies in the Freq axis
    # threshold_quiet_vals - array of the thresholds in quiet of the values in the Freq axis
    # bark_array_float - converted from frequency to bark scale
    # bark_array - values rounded after being converted from frequency to bark scale
    # criticaldefn - the index of the frequency array that is closest to the centre frequency in each bark band 

    # Signal normalization
    signal = numpy.double(signal)
    return_signal = signal.copy()

    # TODO analyze the implcations of this
    # signal = signal / (2.0 ** 15)
    # DC = signal.mean()
    # MAX = (numpy.abs(signal)).max()
    # signal = (signal - DC) / MAX

    N              = len(signal)     # total number of samples
    curPos         = 0
    countFrames    = 0
    countUnits     = 0
    prev_watermark = numpy.zeros(Win)
    while (1):                        # for each short-term window until the end of signal
        # take current window
        frame        = signal[curPos:curPos+Win].copy()
        # hann windowing to allow smooth ends and better concatenation
        frame_hann   = hann(frame,HalfWin)
        # FFT is performed of the time window
        FFT_frame    = (fft(frame_hann))                                          
        #TODO separate function
        # Magnitude and argument of an FFT
        FFT_mag      = abs(FFT_frame)
        FFT_angle    = numpy.angle(FFT_frame)
        # normalize fft to decibel
        FFTdecibel1  = 10*numpy.log10(numpy.square(FFT_mag))
        FFTdecibel   = 10*numpy.log10(numpy.square(FFT_mag)/(Win*Win))
        
        # default value of 0
        parameter    = 0
        #TODO examine how needed this is
        # FFTdecibel,parameter = SPL_normalise(FFTdecibel,Win)        
        # expand the PN bits with sign, expanded bits has a size of 256
        expandedbits     = signexpanded(watermarkbits_expanded,countUnits,float(C[countFrames]))
        # Imp factor - only indexes till 250 are considered significant for masking, the rest are ignored
        P,v              = tonal_markers_sound(FFTdecibel[:256],251)
        
        # If required to analyse tonal and non tonal components
        # tonal_x          = []
        # tonal_y          = []
        # non_tonal_x      = []
        # non_tonal_y      = []
        # for i in range(len(v)):
        # 	if(v[i]==1):
        # 		tonal_x.append(i)
        # 		tonal_y.append(P[i])
        # 	if(v[i]==2):
        # 		non_tonal_x.append(i)
        # 		non_tonal_y.append(P[i])
	    # plt.scatter(tonal_x,tonal_y,c='r',marker='p',s=25)
        # plt.scatter(non_tonal_x,non_tonal_y,c='g',marker='s',s=25)
   
        
        mask_indices     = compute_masking_indices(v,len(v))
        global_mask      = globalMaskingThreshold(P,v,mask_indices,len(v))
        min_mask         = minMaskingThreshold(global_mask)
        min_mask_factors = minMaskFill(min_mask,parameter)

        # plt.figure(1)
        # plt.title('FFT magnitude in decibel(red) Threshold in Quiet(black) Min Masker(green)')
        # plt.plot(FFTdecibel1[:256],c='r')
        # plt.plot(threshold_quiet_vals[:256],c ='black')
        # plt.plot(min_mask_factors,c ='g')
        # plt.show()

        Recon_store = numpy.empty(Win,dtype='complex')
        for i in range(0,Win/2):
            COS = expandedbits[i]*min_mask_factors[i]*numpy.cos(FFT_angle[i])
            SIN = expandedbits[i]*min_mask_factors[i]*numpy.sin(FFT_angle[i])
            Recon_store[i]=complex(COS,SIN)
            if(i != 0):
                Recon_store[Win-i]=complex(COS,-SIN)
        Recon_store[Win/2]= 0

        value_embed      = ifft(Recon_store)
        value_embed_real = numpy.real(value_embed)
        hann_watermark   = hann(value_embed_real,Win)

        # Writing in the info from the psycho acoustic model along with the current frame and the output of the prev iteration.
        for i in range(Step):        
            return_signal[curPos+i] = prev_watermark[Step+i]+(hann_watermark[i]/float(Win))+signal[curPos+i]
        
        # save the prev values
        for i in range(Win):
            prev_watermark[i] = hann_watermark[i];   
    
        # increment the start
        curPos       = curPos + Step 
        # print curPos
        if(curPos+Win>duration_block_point):
            return return_signal
        # U           = 4    no of frames per unit
        # B           = 10   no of units per block
        # when the number of frames reaches U,increment countFrames 
        countFrames+=1
        if(countFrames>=U):
            countFrames = 0
            countUnits+=1
        # when the number of units reaches U,encoding is done
        if(countUnits>=B):
            print 'Finished encoding one block'
            return return_signal
